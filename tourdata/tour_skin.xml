<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19-pr16">

    
  <!-- Spot Style - Load panorama -->


  <style name="IconLoadpanorama"
         url="%FIRSTXML%/spots/pin_3d_hole_user_defaultpoint51.png"
         visible="false"
         edge="center"
         onhover="onhoverIconLoadpanorama"
         onout="onoutIconLoadpanorama"

         height="40"
         width="25"
         />
  <action name="onhoverIconLoadpanorama">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconLoadpanorama">
    hideTooltip();



  </action>



  <!-- unsupported kind of display : PointMap -->


<!-- ********* -->
<!-- Gyroscope -->
<!-- ********* -->


<plugin name="gyroscope"
        url="%FIRSTXML%/graphics/gyro2.js"
        keep="true"
        devices="no-desktop.and.html5"

        onunavailable="checkGyroUnavailable();"
        sensor_mode="1"
        friction="auto"
        autocalibration="true"
        touch_mode="full"
        onavailable="delayedcall(1, checkGyroAvailability(););"
        enabled="false"
        activated="false"
        />

<events name="gyroscopeEvents" onnewpano="planarGyroscopeTest();" keep="true" />

<action name="planarGyroscopeTest">
  if(plugin[gyroscope],
    if(scene[get(xml.scene)].full360,
      set(sceneisfull360, false);
      sub(viewhfov, panoview.hmax, panoview.hmin);
      if (viewhfov == 360,
        sub(viewvfov, panoview.vmax, panoview.vmin);
        if (viewvfov == 180,
          set(sceneisfull360, true);
        );
      );
      if (sceneisfull360,
        set(plugin[gyroscope].camroll, true);
      ,
        set(plugin[gyroscope].camroll, false);
      );
    ,
      set(plugin[gyroscope].camroll, false);
    );
  );
</action>

<action name="changeGyroscopeState">
  if(plugin[gyroscope],
    if (plugin[gyroscope].isavailable,
      if(%1,
        set(plugin[gyroscope].activated,true);
      ,
        set(plugin[gyroscope].activated,false);
      );
      if (%1 != plugin[gyroscope].enabled,
        if(plugin[gyroscope].activated,
          switch(plugin[gyroscope].enabled);
        ,
          set(plugin[gyroscope].enabled, false);
        );
        if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
      );
    );
  );
</action>

<action name="checkGyroAvailability">
  if(plugin[gyroscope],
    if (plugin[gyroscope].isavailable,
      
      set(sceneisfull360, false);
      if (scene[get(xml.scene)].full360,
        sub(viewhfov, panoview.hmax, panoview.hmin);
        if (viewhfov == 360,
          sub(viewvfov, panoview.vmax, panoview.vmin);
          if (viewvfov == 180,
            set(sceneisfull360, true);
          );
        );
      );
      set(delaythegyrocheck, false);
      if (sceneisfull360 AND tour_firstlittleplanet, set(delaythegyrocheck, true));

      ifnot(delaythegyrocheck,
        switch(plugin[gyroscope].enabled);
        set(plugin[gyroscope].activated,true);
        set(tour_gyroscopedevices, true);
        events.dispatch(ongyroscopeavailable);
      ,
        delayedcall(1, checkGyroAvailability(););
      );
    ,
      set(tour_gyroscopedevices, false);
    );
    if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
  ,
    checkGyroUnavailable();
  );
</action>

<action name="checkGyroUnavailable">
  set(plugin[gyroscope].activated, false);
  set(plugin[gyroscope].enabled, false);
  set(tour_gyroscopedevices, false);
  events.dispatch(ongyroscopeunavailable);
</action>

<!-- ********** -->
<!-- Sans Control Bar -->
<!-- id : SansControlBar -->
<!-- ********** -->

  <krpano SansControlBarbarbuilt="false" SansControlBarbackgroundwidthwhenclosed="0" SansControlBarbackgroundwidthwhenopened="0" SansControlBarIsOpened="false" />
  <events name="SansControlBarevents" 
    onxmlcomplete="SansControlBarbuildMenuBar();" 


    keep="true" />



  <action name="SansControlBarbuildMenuBar">
    ifnot (SansControlBarbarbuilt, SansControlBarbuildMenu(); set(SansControlBarbarbuilt, true););
  </action>

  <style name="SansControlBar_btn_style"
         keep="true"
         edge="right"
         align="right"
         x="0" y="0"
         width="40" height="40"
         crop="0|0|60|60"
         onovercrop="0|60|60|60"
         ondowncrop="0|120|60|60"
         onhover="showTooltip('plugin', SansControlBarmenuTooltipStyle, bottom);"
         onout="hideTooltip();"
         />
  <style name="SansControlBar_btn_style_off"
         keep="true"
         edge="right"
         align="right"
         x="0" y="0"
         width="40" height="40"
         onhover="showTooltip('plugin', SansControlBarmenuTooltipStyle, bottom);"
         onout="hideTooltip();"
         />

  <layer name="SansControlBar_menu_bg"
         keep="true"
         type="container"
         zorder="2"
         width="40"
         height="40"
         align="bottom"
         x="0" y="10"
         maskchildren="true"
         rotate="0"
         visible="false"
         >

    <layer name="SansControlBarbtn_enter_vr"
            url="%FIRSTXML%/graphics/sans controlbar/btn_vr_mode.png"
            style="SansControlBar_btn_style"
            onclick="if(scene[get(xml.scene)].full360 AND disableCurrentSceneVrConservation !== true,
    js(accessWebVr(get(xml.scene),get(videoscenestarttime)));
,
    js(accessWebVr(null));
);"
            tooltip="SansControlBarenterVRTip"
            visible="false"
            devices="html5"
            />
    <layer name="SansControlBarbtn_enter_vr_not"
            url="%FIRSTXML%/graphics/sans controlbar/btn_vr_mode_off.png"
            style="SansControlBar_btn_style"
            tooltip="SansControlBarenterVRNotTip"
            enabled="true"
            capture="false"
            visible="false"
            devices="html5"
            />

    <layer name="SansControlBarbtn_home"
           url="%FIRSTXML%/graphics/sans controlbar/btn_home.png"
           style="SansControlBar_btn_style"
           onclick="SansControlBarbtn_home_action();"
           visible="false"
           tooltip="SansControlBarhomeTip"
           />



    <layer name="SansControlBarbtn_prev_pano"
            url="%FIRSTXML%/graphics/sans controlbar/btn_previous_scene.png"
            onclick="loadPreviousScene();
"
            style="SansControlBar_btn_style"
            tooltip="SansControlBarprevSceneTip"
            visible="false"
            />
    <layer name="SansControlBarbtn_next_pano"
            url="%FIRSTXML%/graphics/sans controlbar/btn_next_scene.png"
            onclick="loadNextScene();
"
            style="SansControlBar_btn_style"
            tooltip="SansControlBarnextSceneTip"
            visible="false"
            />



    <layer name="SansControlBarbtn_openfs"
            url="%FIRSTXML%/graphics/sans controlbar/btn_enter_fs.png"
            onclick="enterFullscreen();
"
            style="SansControlBar_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="SansControlBaropenFsTip"
            />
    <layer name="SansControlBarbtn_closefs"
            url="%FIRSTXML%/graphics/sans controlbar/btn_close_fs.png"
            onclick="exitFullscreen();
"
            style="SansControlBar_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="SansControlBarcloseFsTip"
            />

    <layer name="SansControlBarbtn_autorotate_on"
            url="%FIRSTXML%/graphics/sans controlbar/btn_start_autorotation.png"
            onclick="resumeautorotation();
"
            style="SansControlBar_btn_style"
            visible="false"
            tooltip="SansControlBarautorotateOnTip"
            />
    <layer name="SansControlBarbtn_autorotate_off"
            url="%FIRSTXML%/graphics/sans controlbar/btn_stop_autorotation.png"
            onclick="pauseautorotation();
"
            style="SansControlBar_btn_style"
            visible="false"
            tooltip="SansControlBarautorotateOffTip"
            />





 </layer>

    <action name="SansControlBarbtn_home_action">
openurl(http://dennismairena.github.io/rpor,_self);

    </action>


<events name="SansControlBarvravailableevent"
		onvravailable="SansControlBarupdateVrButtonsAvailability();"
		onvrunavailable="SansControlBarupdateVrButtonsAvailability();"
		keep="true" devices="html5" />
	<krpano SansControlBarmenuvravailable="false" />
	<action name="SansControlBarupdateVrButtonsAvailability">
		if (tour_vrdevices,
			set(SansControlBarmenuvravailable, true);
		,
			set(SansControlBarmenuvravailable, false);
		);
		SansControlBarupdateVrButtons();
	</action>
	<action name="SansControlBarHideVrButtons">
		set(layer[SansControlBarbtn_enter_vr].visible, false);
		if('%1' == 'true' AND plugin[ptpvrmode],
			set(layer[SansControlBarbtn_enter_vr_not].visible, true);
		,
			set(layer[SansControlBarbtn_enter_vr_not].visible, false);
		);
	</action>
	<action name="SansControlBarShowVrButtons">
		if (SansControlBarmenuvravailable,
			set(layer[SansControlBarbtn_enter_vr].visible, true);
			set(layer[SansControlBarbtn_enter_vr_not].visible, false);
		,
			SansControlBarHideVrButtons(true);
		);
	</action>
	<action name="SansControlBarupdateVrButtons">
	if (tour_vrdevices,
		if (SansControlBarIsOpened,
			SansControlBarShowVrButtons();
		,
			SansControlBarHideVrButtons();
		);
	,
		if (SansControlBarIsOpened,
			SansControlBarHideVrButtons(true);
		,
			SansControlBarHideVrButtons();
		);
	);
	</action>



  <action name="SansControlBarhideMenuControls">
    set(SansControlBarIsOpened, false);
if (scene.count GT 1,
	set(layer[SansControlBarbtn_next_pano].visible, false);
	set(layer[SansControlBarbtn_prev_pano].visible, false);
);


set(layer[SansControlBarbtn_home].visible, false);
	SansControlBarupdateFullscreenButtons();


	SansControlBarupdateAutorotationButtons();



	SansControlBarupdateVrButtons();



	set(layer[SansControlBar_menu_bg].width, get(SansControlBarbackgroundwidthwhenclosed));

	set(layer[SansControlBar_menu_bg].visible, true);
  </action>
  <action name="SansControlBarshowMenuControls">
    set(SansControlBarIsOpened, true);
	set(layer[SansControlBar_menu_bg].visible, true);
if (scene.count GT 1,
	set(layer[SansControlBarbtn_next_pano].visible, true);
	set(layer[SansControlBarbtn_prev_pano].visible, true);
);


set(layer[SansControlBarbtn_home].visible, true);
	SansControlBarupdateFullscreenButtons();


	SansControlBarupdateAutorotationButtons();

	SansControlBarupdateVrButtons();




    set(layer[SansControlBar_menu_bg].width, get(SansControlBarbackgroundwidthwhenopened));
  </action>




  <events name="SansControlBarmenufullscreenchangeevent"
          onenterfullscreen="SansControlBarupdateFullscreenButtons();"
          onexitfullscreen="SansControlBarupdateFullscreenButtons();"
          keep="true"/>
	<action name="SansControlBarHideFullscreenButtons">
		set(layer[SansControlBarbtn_openfs].visible , false);
		set(layer[SansControlBarbtn_closefs].visible, false);
	</action>
	<action name="SansControlBarShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[SansControlBarbtn_openfs].visible , false);
				set(layer[SansControlBarbtn_closefs].visible, true);
			,
				set(layer[SansControlBarbtn_openfs].visible ,true);
				set(layer[SansControlBarbtn_closefs].visible,false);
			);
		,
			SansControlBarHideFullscreenButtons();
		);
	</action>
	<action name="SansControlBarupdateFullscreenButtons">
		if (SansControlBarIsOpened,
			SansControlBarShowFullscreenButtons();
		,
			SansControlBarHideFullscreenButtons();
		);
	</action>

	<events name="SansControlBarAutorotationEvents"
		onstartautorotation="SansControlBarupdateAutorotationButtons();"
		onresumeautorotation="SansControlBarupdateAutorotationButtons();"
		onstopautorotation="SansControlBarupdateAutorotationButtons();"
		onpauseautorotation="SansControlBarupdateAutorotationButtons();"
		keep="true"/>
	<action name="SansControlBarHideAutorotationButtons">
		set(layer[SansControlBarbtn_autorotate_off].visible, false);
		set(layer[SansControlBarbtn_autorotate_on].visible , false);
	</action>
	<action name="SansControlBarShowAutorotationButtons">
		if(autorotate.enabled == false,
			set(layer[SansControlBarbtn_autorotate_off].visible, false);
			set(layer[SansControlBarbtn_autorotate_on].visible , true);
		,
			set(layer[SansControlBarbtn_autorotate_off].visible, true);
			set(layer[SansControlBarbtn_autorotate_on].visible , false);
		);
	</action>
	<action name="SansControlBarupdateAutorotationButtons">
		if (SansControlBarIsOpened,
			SansControlBarShowAutorotationButtons();
		,
			SansControlBarHideAutorotationButtons();
		);
	</action>



<layer name="SansControlBarmenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="false"
	border="false"
	css="color:#000000;font-family:Helvetica;font-weight:bold;font-size:14px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	xoffset="0"
	yoffset="0"
	padding="2"
	selectable="false"
	zorder="0"
	visible="false"
	html=""
	edge="bottom"
/>
  <action name="SansControlBarbuildMenu">
    
    set(SansControlBarbutton_pos, 0);



      if (device.fullscreensupport,
        set(layer[SansControlBarbtn_openfs].x , get(SansControlBarbutton_pos));
        set(layer[SansControlBarbtn_closefs].x, get(SansControlBarbutton_pos));
        inc(SansControlBarbutton_pos, 45);
      );



      set(layer[SansControlBarbtn_autorotate_on].x , get(SansControlBarbutton_pos));
      set(layer[SansControlBarbtn_autorotate_off].x, get(SansControlBarbutton_pos));
      inc(SansControlBarbutton_pos, 45);




    if(plugin[ptpvrmode] AND device.html5,
      set(layer[SansControlBarbtn_enter_vr].x, get(SansControlBarbutton_pos));
      set(layer[SansControlBarbtn_enter_vr_not].x, get(SansControlBarbutton_pos));
      inc(SansControlBarbutton_pos, 45);
    );



        set(layer[SansControlBarbtn_home].x, get(SansControlBarbutton_pos));
        inc(SansControlBarbutton_pos, 45);

    if (scene.count GT 1,
        set(layer[SansControlBarbtn_next_pano].x, get(SansControlBarbutton_pos));
        inc(SansControlBarbutton_pos, 45);
        set(layer[SansControlBarbtn_prev_pano].x, get(SansControlBarbutton_pos));
        inc(SansControlBarbutton_pos, 45);
      );



      dec(SansControlBarbutton_pos, 5);

      set(SansControlBarbackgroundwidthwhenopened, get(SansControlBarbutton_pos));


    
      set(layer[SansControlBar_menu_bg].width, get(SansControlBarbackgroundwidthwhenopened));
	
	
	
    </action>

	<events name="SansControlBarStartTourEvents" onTourStart="SansControlBarCallOnStartTour();" keep="true" />
	
	<action name="SansControlBarCallOnStartTour">
		
		SansControlBarshowMenuControls();
	</action>



<!-- ********** -->
<!-- Logo1 -->
<!-- id : logo1 -->
<!-- ********** -->


  <layer align="topleft"
         x="10"
         y="10"
         zorder="3"
         name="logo1"
         keep="true"
         visible="false"
         capture="false"

			tooltip="logo1tooltipText"
			onhover="showTooltip('plugin');"
			onout="hideTooltip();"
         url="%FIRSTXML%/graphics/logo1/logotransparentbackround.jpg" 
         handcursor="false"

         height="70"
         width="200"

         />

  <events name="logo1events" 
    onTourStart="showlogo1();"
    keep="true" />

  <action name="hidelogo1">
    set(layer[logo1].visible, false);
  </action>
  <action name="showlogo1">
      set(layer[logo1].visible, true);
  </action>





  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);set(fullscreen,false);</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);set(fullscreen,true);</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>

	<!-- WebVR plugin for VR availability tests -->

	<plugin name="ptpvrmode" devices="html5" keep="true"
		url="%FIRSTXML%/graphics/webvr.js"
		mobilevr_support="true"
		mobilevr_fake_support="false"
		vr_cursor=""
		vr_cursor_enabled="false"
		onavailable="delayedcall(1, checkVrAvailability(););"
		onunavailable="checkVrUnavailable();"
		/>
	<action name="checkVrAvailability">
		if(plugin[ptpvrmode],
			if (plugin[ptpvrmode].isavailable,
				set(tour_vrdevices, true);
				events.dispatch(onvravailable);
			,
				set(tour_vrdevices, false);
			);
		,
			checkVrUnavailable();
		);
	</action>
	<action name="checkVrUnavailable">
		set(tour_vrdevices, false);
		events.dispatch(onvrunavailable);
	</action>
</krpano>